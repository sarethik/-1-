using System;
using System.Text;
using System.Text.RegularExpressions;


namespace Lab1
{
    class Program
    {
        static void FindMatches(string str, string pattern)
        {
            Regex pat = new Regex(pattern);
            MatchCollection match = pat.Matches(str);
            Console.WriteLine("Строка = {0}\t Образец = {1} \t Найдено {2}", str, pattern, match.Count);
        }

        static void randomize (int[,] points, int thirst, int second)
        {
            Random rnd = new Random();
            for (int j = 0; j < thirst; j++)
            {
                for (int p = 0; p < second; p++)
                {
                    points[j, p] = rnd.Next(-10, 10);
                }
            }
        }

        static void MakeItBigger(StringBuilder firstString, StringBuilder secondString)
        {
            secondString = firstString;
            int i = 0;
            while (i != secondString.Length)
            {
                if (secondString[i] == '.' || secondString[i] == '?' || secondString[i] == '!')
                {
                    if (secondString[i + 1] == ' ')
                    {
                        secondString[i + 2] = char.ToUpper(secondString[i + 2]);
                        i++;
                        continue;
                    }
                    secondString[i + 1] = char.ToUpper(secondString[i + 1]);
                    i++;
                    continue;
                }
                i++;
            }

            for (int j = 0; j < secondString.Length; j++)

            {
                Console.Write("{0}", secondString[j]);
            }
        }


        static void Main(string[] args)
        {

            // 1.1
            int thirst = 3;
            int second = 2;

            int[,] points = new int[thirst, second];

            randomize(points, thirst, second);

            double[] d = new double[3];

            d[0] = Math.Sqrt(Math.Pow(points[0, 0] - points[1, 0], 2) + Math.Pow(points[0, 1] - points[1, 1], 2));

            d[1] = Math.Sqrt(Math.Pow(points[0, 0] - points[2, 0], 2) + Math.Pow(points[0, 1] - points[2, 1], 2));

            d[2] = Math.Sqrt(Math.Pow(points[1, 0] - points[2, 0], 2) + Math.Pow(points[1, 1] - points[2, 1], 2));


            double far = 0;
            int which = 0;
            for (int j = 0; j < 2; j++)
            {
                far = d[j];
                if (d[j + 1] > d[j])
                {
                    far = d[j + 1];
                    which = j + 1;
                }
            }

            switch (which)
            {
                case (0):
                    Console.Write("расстояние между точками x({0}, {1}) и y({2}, {3}) = {4}\n\n", points[0, 0], points[0, 1], points[1, 0], points[1, 1], far);
                    break;

                case (1):
                    Console.Write("расстояние между точками x({0}, {1}) и y({2}, {3}) = {4}\n\n", points[0, 0], points[0, 1], points[2, 0], points[2, 1], far);
                    break;

                case (2):
                    Console.Write("расстояние между точками x({0}, {1}) и y({2}, {3}) = {4}\n\n", points[1, 0], points[1, 1], points[2, 0], points[2, 1], far);
                    break;
            }

            //2.1

            StringBuilder line = new StringBuilder(Console.ReadLine());
            StringBuilder changedLine = new StringBuilder();


            MakeItBigger(line, changedLine);
            
            // 3.1

            Console.WriteLine("Введите образец для поиска");
            string pattern = Console.ReadLine();

            Console.WriteLine("Введите строку");
            string str = Console.ReadLine();


            FindMatches(str, pattern);

        }
    
    }
}

using System;
using System.Text;
using System.Text.RegularExpressions;


namespace Lab1
{
    class Program
    {
        static void FindMatches (string str, string pattern)
        {
            Regex pat = new Regex(pattern);
            MatchCollection match = pat.Matches(str);
            Console.WriteLine("Строка = {0}\t Образец = {1} \t Найдено {2}", str, pattern, match.Count);
        }

        static void Randomize (int[,] points, int point, int axis)
        {
            Random rnd = new Random();
            for (int j = 0; j < point; j++)
            {
                for (int p = 0; p < axis; p++)
                {
                    points[j, p] = rnd.Next(-10, 10);
                }
            }
        }
       
        static void TheLetterToUpper (StringBuilder str)
        {

            int i = 0;
            while (i != str.Length)
            {
                if (str[i] == '.' || str[i] == '?' || str[i] == '!')
                {
                    if (str[i + 1] == ' ')
                    {
                        str[i + 2] = char.ToUpper(str[i + 2]);
                        i++;
                        continue;
                    }
                    str[i + 1] = char.ToUpper(str[i + 1]);
                    i++;
                    continue;
                }
                i++;
            }
        }

        static double Distance (int aX, int aY, int bX, int bY)
        {
            return Math.Sqrt(Math.Pow(aX - bX, 2) + Math.Pow(aY - bY, 2));
        }

        static void Main (string[] args)
        {
            //1.1
            Console.WriteLine("\nЗадание 1.1\n\n");

            int[,] points = new int[3, 2];
            double[] d = new double[3];

            Randomize(points, 3, 2);

            d[0] = Distance(points[0, 0], points[0, 1], points[1, 0], points[1, 1]);
            d[1] = Distance(points[0, 0], points[0, 1], points[2, 0], points[2, 1]);
            d[2] = Distance(points[1, 0], points[1, 1], points[2, 0], points[2, 1]);

            double lineLength = 0;
            int lineNumber = 0;
            for (int j = 0; j < 2; j++)
            {
                lineLength = d[j];
                if (d[j + 1] > d[j])
                {
                    lineLength = d[j + 1];
                    lineNumber = j + 1;
                }
            }

            switch (lineNumber)
            {
                case (0):
                    Console.Write("расстояние между точками x({0}, {1}) и y({2}, {3}) = {4}\n\n", points[0, 0], points[0, 1], points[1, 0], points[1, 1], lineLength);
                    break;

                case (1):
                    Console.Write("расстояние между точками x({0}, {1}) и y({2}, {3}) = {4}\n\n", points[0, 0], points[0, 1], points[2, 0], points[2, 1], lineLength);
                    break;

                case (2):
                    Console.Write("расстояние между точками x({0}, {1}) и y({2}, {3}) = {4}\n\n", points[1, 0], points[1, 1], points[2, 0], points[2, 1], lineLength);
                    break;
            }

            //2.1
            Console.WriteLine("\n\nЗадание 2.1 \n\n");

            Console.Write("Введите строку: ");
            StringBuilder str = new StringBuilder(Console.ReadLine());

            TheLetterToUpper(str);

            for (int j = 0; j < str.Length; j++)

            {
                Console.Write("{0}", str[j]);
            }

            //3.1
            Console.WriteLine("\n\nЗадание 3.1 \n\n");

            Console.Write("Введите образец для поиска: ");
            string pattern = Console.ReadLine();

            Console.WriteLine();

            Console.Write("Введите строку: ");
            string stringToCheck = Console.ReadLine();


            FindMatches(stringToCheck, pattern);

        }
    
    }
}
